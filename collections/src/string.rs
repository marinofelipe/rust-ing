#![allow(unused)]
#![allow(dead_code)]

fn basics() {
    let mut _s = String::new();

    let data = "initial contents"; //&str (slice)

    let _s = data.to_string(); //String

    // the method also works on a literal directly:
    let _s = "initial contents".to_string();

    // or create a String from a &str
    let _s = String::from("initial contents");
}

// UTF-8 encoded, so we can include any properly encoded data in them
fn examples_of_strings() {
    let _hello = String::from("السلام عليكم");
    let _hello = String::from("Dobrý den");
    let _hello = String::from("Hello");
    let _hello = String::from("שלום");
    let _hello = String::from("नमस्ते");
    let _hello = String::from("こんにちは");
    let _hello = String::from("안녕하세요");
    let _hello = String::from("你好");
    let _hello = String::from("Olá");
    let _hello = String::from("Здравствуйте");
    let _hello = String::from("Hola");
}

fn updating_strings() {
    let mut s = String::from("foo");
    s.push_str("bar"); //foobar

    let mut s1 = String::from("foo");
    let s2 = "bar";
    s1.push_str(s2);
    println!("s2 is {s2}");

    // push takes a single character as an argument and adds it to the String
    let mut s = String::from("lo");
    s.push('l');
}

fn concatenation() {
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    let s3 = s1 + &s2; // the coerces the &String argument into a &str
    // note s1 has been moved here and can no longer be used

    // multiple strings
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");
    let _s = s1 + "-" + &s2 + "-" + &s3;

    let s1 = String::from("tic"); // because the previous S1 was taken by the + operator

    // easier with the format! macro
    let _s = format!("{s1}-{s2}-{s3}"); // the code generated by the format! macro uses references so that this call doesn’t take ownership of any of its parameters.
}

fn indexing() {
    let s1 = String::from("hello");
    // let h = s1[0]; // error[E0277]: the type `str` cannot be indexed by `{integer}`
}
